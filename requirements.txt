import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
import asyncio
import nest_asyncio

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '7611337918:AAGp9MAnkKnMP0gDZJobFSDj8FklHGOcDy8'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_message(update: Update, text: str, reply_markup: InlineKeyboardMarkup):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π."""
    if update.callback_query:
        try:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            if "Message is not modified" not in str(e):
                raise e
    elif update.message:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

# –ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("ü™ê –ì–ª–∞–≤–Ω–∞—è", callback_data='main')],
        [InlineKeyboardButton("üìö –£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data='study')],
        [InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data='news')],
        [InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data='analytics')],
        [InlineKeyboardButton("üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data='tools')],
        [InlineKeyboardButton("‚ùì FAQ", callback_data='faq')],
        [InlineKeyboardButton("üë®‚ÄçüöÄ –û –Ω–∞—Å", callback_data='about')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_message(update, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Å–º–æ—Å –∑–Ω–∞–Ω–∏–π –æ –∫—Ä–∏–ø—Ç–æ–∏–Ω–¥—É—Å—Ç—Ä–∏–∏! üöÄ\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!", reply_markup)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–º–µ–Ω—é
async def study_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—é –£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"""
    keyboard = [
        [InlineKeyboardButton("üìñ –ö–Ω–∏–≥–∏", callback_data='study_books')],
        [InlineKeyboardButton("üé• –í–∏–¥–µ–æ", callback_data='study_videos')],
        [InlineKeyboardButton("üñºÔ∏è –ü–∞—Ç—Ç–µ—Ä–Ω—ã", callback_data='gallery')],
        [InlineKeyboardButton("üìÑ –°—Ç–∞—Ç—å–∏", callback_data='articles')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_message(update, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:", reply_markup)

async def news_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—é –ù–æ–≤–æ—Å—Ç–∏"""
    keyboard = [
        [InlineKeyboardButton("üåê –û–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data='news_general')],
        [InlineKeyboardButton("üíπ –ù–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞", callback_data='news_market')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_message(update, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π:", reply_markup)

async def analytics_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—é –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"""
    keyboard = [
        [InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫–∏", callback_data='analytics_charts')],
        [InlineKeyboardButton("üìã –û—Ç—á–µ—Ç—ã", callback_data='analytics_reports')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_message(update, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:", reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()

    if query.data == 'main':
        await start(update, context)
    elif query.data == 'study':
        await study_menu(update, context)
    elif query.data == 'news':
        await news_menu(update, context)
    elif query.data == 'analytics':
        await analytics_menu(update, context)
    elif query.data == 'tools':
        await send_message(update, "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", None)
    elif query.data == 'faq':
        await send_message(update, "–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞–∑–¥–µ–ª FAQ.", None)
    elif query.data == 'about':
        await send_message(update, "–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤ –∫—Ä–∏–ø—Ç–æ–∏–Ω–¥—É—Å—Ç—Ä–∏–∏!", None)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_polling()

if __name__ == '__main__':
    nest_asyncio.apply()  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—Ç—á–∞ –¥–ª—è —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ event loop
    asyncio.run(main())
